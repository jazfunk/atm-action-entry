'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsAE_DataSync"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsAE_DataSync
    Inherits Global.System.Data.DataSet
    
    Private tabledtXMLdp As dtXMLdpDataTable
    
    Private tableqryNPIdataSync As qryNPIdataSyncDataTable
    
    Private tableatmUhDT As atmUhDTDataTable
    
    Private tabletblGuardRailDailyProductions As tblGuardRailDailyProductionsDataTable
    
    Private tabledtFileNameObj As dtFileNameObjDataTable
    
    Private tabletblActionMessages As tblActionMessagesDataTable
    
    Private tabledtXMLsr As dtXMLsrDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtXMLdp")) Is Nothing) Then
                MyBase.Tables.Add(New dtXMLdpDataTable(ds.Tables("dtXMLdp")))
            End If
            If (Not (ds.Tables("qryNPIdataSync")) Is Nothing) Then
                MyBase.Tables.Add(New qryNPIdataSyncDataTable(ds.Tables("qryNPIdataSync")))
            End If
            If (Not (ds.Tables("atmUhDT")) Is Nothing) Then
                MyBase.Tables.Add(New atmUhDTDataTable(ds.Tables("atmUhDT")))
            End If
            If (Not (ds.Tables("tblGuardRailDailyProductions")) Is Nothing) Then
                MyBase.Tables.Add(New tblGuardRailDailyProductionsDataTable(ds.Tables("tblGuardRailDailyProductions")))
            End If
            If (Not (ds.Tables("dtFileNameObj")) Is Nothing) Then
                MyBase.Tables.Add(New dtFileNameObjDataTable(ds.Tables("dtFileNameObj")))
            End If
            If (Not (ds.Tables("tblActionMessages")) Is Nothing) Then
                MyBase.Tables.Add(New tblActionMessagesDataTable(ds.Tables("tblActionMessages")))
            End If
            If (Not (ds.Tables("dtXMLsr")) Is Nothing) Then
                MyBase.Tables.Add(New dtXMLsrDataTable(ds.Tables("dtXMLsr")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtXMLdp() As dtXMLdpDataTable
        Get
            Return Me.tabledtXMLdp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryNPIdataSync() As qryNPIdataSyncDataTable
        Get
            Return Me.tableqryNPIdataSync
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property atmUhDT() As atmUhDTDataTable
        Get
            Return Me.tableatmUhDT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblGuardRailDailyProductions() As tblGuardRailDailyProductionsDataTable
        Get
            Return Me.tabletblGuardRailDailyProductions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtFileNameObj() As dtFileNameObjDataTable
        Get
            Return Me.tabledtFileNameObj
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblActionMessages() As tblActionMessagesDataTable
        Get
            Return Me.tabletblActionMessages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtXMLsr() As dtXMLsrDataTable
        Get
            Return Me.tabledtXMLsr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsAE_DataSync = CType(MyBase.Clone,dsAE_DataSync)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtXMLdp")) Is Nothing) Then
                MyBase.Tables.Add(New dtXMLdpDataTable(ds.Tables("dtXMLdp")))
            End If
            If (Not (ds.Tables("qryNPIdataSync")) Is Nothing) Then
                MyBase.Tables.Add(New qryNPIdataSyncDataTable(ds.Tables("qryNPIdataSync")))
            End If
            If (Not (ds.Tables("atmUhDT")) Is Nothing) Then
                MyBase.Tables.Add(New atmUhDTDataTable(ds.Tables("atmUhDT")))
            End If
            If (Not (ds.Tables("tblGuardRailDailyProductions")) Is Nothing) Then
                MyBase.Tables.Add(New tblGuardRailDailyProductionsDataTable(ds.Tables("tblGuardRailDailyProductions")))
            End If
            If (Not (ds.Tables("dtFileNameObj")) Is Nothing) Then
                MyBase.Tables.Add(New dtFileNameObjDataTable(ds.Tables("dtFileNameObj")))
            End If
            If (Not (ds.Tables("tblActionMessages")) Is Nothing) Then
                MyBase.Tables.Add(New tblActionMessagesDataTable(ds.Tables("tblActionMessages")))
            End If
            If (Not (ds.Tables("dtXMLsr")) Is Nothing) Then
                MyBase.Tables.Add(New dtXMLsrDataTable(ds.Tables("dtXMLsr")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtXMLdp = CType(MyBase.Tables("dtXMLdp"),dtXMLdpDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtXMLdp) Is Nothing) Then
                Me.tabledtXMLdp.InitVars
            End If
        End If
        Me.tableqryNPIdataSync = CType(MyBase.Tables("qryNPIdataSync"),qryNPIdataSyncDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqryNPIdataSync) Is Nothing) Then
                Me.tableqryNPIdataSync.InitVars
            End If
        End If
        Me.tableatmUhDT = CType(MyBase.Tables("atmUhDT"),atmUhDTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableatmUhDT) Is Nothing) Then
                Me.tableatmUhDT.InitVars
            End If
        End If
        Me.tabletblGuardRailDailyProductions = CType(MyBase.Tables("tblGuardRailDailyProductions"),tblGuardRailDailyProductionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblGuardRailDailyProductions) Is Nothing) Then
                Me.tabletblGuardRailDailyProductions.InitVars
            End If
        End If
        Me.tabledtFileNameObj = CType(MyBase.Tables("dtFileNameObj"),dtFileNameObjDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtFileNameObj) Is Nothing) Then
                Me.tabledtFileNameObj.InitVars
            End If
        End If
        Me.tabletblActionMessages = CType(MyBase.Tables("tblActionMessages"),tblActionMessagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblActionMessages) Is Nothing) Then
                Me.tabletblActionMessages.InitVars
            End If
        End If
        Me.tabledtXMLsr = CType(MyBase.Tables("dtXMLsr"),dtXMLsrDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtXMLsr) Is Nothing) Then
                Me.tabledtXMLsr.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsAE_DataSync"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsAE_DataSync.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtXMLdp = New dtXMLdpDataTable
        MyBase.Tables.Add(Me.tabledtXMLdp)
        Me.tableqryNPIdataSync = New qryNPIdataSyncDataTable
        MyBase.Tables.Add(Me.tableqryNPIdataSync)
        Me.tableatmUhDT = New atmUhDTDataTable
        MyBase.Tables.Add(Me.tableatmUhDT)
        Me.tabletblGuardRailDailyProductions = New tblGuardRailDailyProductionsDataTable
        MyBase.Tables.Add(Me.tabletblGuardRailDailyProductions)
        Me.tabledtFileNameObj = New dtFileNameObjDataTable
        MyBase.Tables.Add(Me.tabledtFileNameObj)
        Me.tabletblActionMessages = New tblActionMessagesDataTable
        MyBase.Tables.Add(Me.tabletblActionMessages)
        Me.tabledtXMLsr = New dtXMLsrDataTable
        MyBase.Tables.Add(Me.tabledtXMLsr)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtXMLdp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeqryNPIdataSync() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeatmUhDT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblGuardRailDailyProductions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtFileNameObj() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblActionMessages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtXMLsr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsAE_DataSync = New dsAE_DataSync
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtXMLdpRowChangeEventHandler(ByVal sender As Object, ByVal e As dtXMLdpRowChangeEvent)
    
    Public Delegate Sub qryNPIdataSyncRowChangeEventHandler(ByVal sender As Object, ByVal e As qryNPIdataSyncRowChangeEvent)
    
    Public Delegate Sub atmUhDTRowChangeEventHandler(ByVal sender As Object, ByVal e As atmUhDTRowChangeEvent)
    
    Public Delegate Sub tblGuardRailDailyProductionsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblGuardRailDailyProductionsRowChangeEvent)
    
    Public Delegate Sub dtFileNameObjRowChangeEventHandler(ByVal sender As Object, ByVal e As dtFileNameObjRowChangeEvent)
    
    Public Delegate Sub tblActionMessagesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblActionMessagesRowChangeEvent)
    
    Public Delegate Sub dtXMLsrRowChangeEventHandler(ByVal sender As Object, ByVal e As dtXMLsrRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtXMLdpDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtXMLdpRow)
        
        Private columnforeman As Global.System.Data.DataColumn
        
        Private columnentryDate As Global.System.Data.DataColumn
        
        Private columndisplayName As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columndpID As Global.System.Data.DataColumn
        
        Private columnjobNum As Global.System.Data.DataColumn
        
        Private columnsite As Global.System.Data.DataColumn
        
        Private columnpayItemID As Global.System.Data.DataColumn
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columndpQty As Global.System.Data.DataColumn
        
        Private columnsiteNotes As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtXMLdp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property foremanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforeman
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property displayNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndisplayName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dpIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndpID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jobNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjobNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property payItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dpQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndpQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siteNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsiteNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtXMLdpRow
            Get
                Return CType(Me.Rows(index),dtXMLdpRow)
            End Get
        End Property
        
        Public Event dtXMLdpRowChanging As dtXMLdpRowChangeEventHandler
        
        Public Event dtXMLdpRowChanged As dtXMLdpRowChangeEventHandler
        
        Public Event dtXMLdpRowDeleting As dtXMLdpRowChangeEventHandler
        
        Public Event dtXMLdpRowDeleted As dtXMLdpRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtXMLdpRow(ByVal row As dtXMLdpRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtXMLdpRow(ByVal foreman As Integer, ByVal entryDate As Date, ByVal displayName As String, ByVal ID As Integer, ByVal dpID As Integer, ByVal jobNum As String, ByVal site As String, ByVal payItemID As Integer, ByVal code As String, ByVal description As String, ByVal dpQty As Double, ByVal siteNotes As String) As dtXMLdpRow
            Dim rowdtXMLdpRow As dtXMLdpRow = CType(Me.NewRow,dtXMLdpRow)
            Dim columnValuesArray() As Object = New Object() {foreman, entryDate, displayName, ID, dpID, jobNum, site, payItemID, code, description, dpQty, siteNotes}
            rowdtXMLdpRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtXMLdpRow)
            Return rowdtXMLdpRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtXMLdpDataTable = CType(MyBase.Clone,dtXMLdpDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtXMLdpDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnforeman = MyBase.Columns("foreman")
            Me.columnentryDate = MyBase.Columns("entryDate")
            Me.columndisplayName = MyBase.Columns("displayName")
            Me.columnID = MyBase.Columns("ID")
            Me.columndpID = MyBase.Columns("dpID")
            Me.columnjobNum = MyBase.Columns("jobNum")
            Me.columnsite = MyBase.Columns("site")
            Me.columnpayItemID = MyBase.Columns("payItemID")
            Me.columncode = MyBase.Columns("code")
            Me.columndescription = MyBase.Columns("description")
            Me.columndpQty = MyBase.Columns("dpQty")
            Me.columnsiteNotes = MyBase.Columns("siteNotes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnforeman = New Global.System.Data.DataColumn("foreman", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforeman)
            Me.columnentryDate = New Global.System.Data.DataColumn("entryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentryDate)
            Me.columndisplayName = New Global.System.Data.DataColumn("displayName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndisplayName)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columndpID = New Global.System.Data.DataColumn("dpID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndpID)
            Me.columnjobNum = New Global.System.Data.DataColumn("jobNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjobNum)
            Me.columnsite = New Global.System.Data.DataColumn("site", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsite)
            Me.columnpayItemID = New Global.System.Data.DataColumn("payItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayItemID)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columndpQty = New Global.System.Data.DataColumn("dpQty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndpQty)
            Me.columnsiteNotes = New Global.System.Data.DataColumn("siteNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsiteNotes)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtXMLdpRow() As dtXMLdpRow
            Return CType(Me.NewRow,dtXMLdpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtXMLdpRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtXMLdpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtXMLdpRowChangedEvent) Is Nothing) Then
                RaiseEvent dtXMLdpRowChanged(Me, New dtXMLdpRowChangeEvent(CType(e.Row,dtXMLdpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtXMLdpRowChangingEvent) Is Nothing) Then
                RaiseEvent dtXMLdpRowChanging(Me, New dtXMLdpRowChangeEvent(CType(e.Row,dtXMLdpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtXMLdpRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtXMLdpRowDeleted(Me, New dtXMLdpRowChangeEvent(CType(e.Row,dtXMLdpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtXMLdpRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtXMLdpRowDeleting(Me, New dtXMLdpRowChangeEvent(CType(e.Row,dtXMLdpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtXMLdpRow(ByVal row As dtXMLdpRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtXMLdpDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qryNPIdataSyncDataTable
        Inherits Global.System.Data.TypedTableBase(Of qryNPIdataSyncRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnuserID As Global.System.Data.DataColumn
        
        Private columnfirstName As Global.System.Data.DataColumn
        
        Private columnlastName As Global.System.Data.DataColumn
        
        Private columndpID As Global.System.Data.DataColumn
        
        Private columnjobNum As Global.System.Data.DataColumn
        
        Private columnsite As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnnpID As Global.System.Data.DataColumn
        
        Private columnnpDescription As Global.System.Data.DataColumn
        
        Private columnnpQty As Global.System.Data.DataColumn
        
        Private columnnpUnit As Global.System.Data.DataColumn
        
        Private columnproductionDate As Global.System.Data.DataColumn
        
        Private columnnpNotes As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qryNPIdataSync"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property firstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dpIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndpID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jobNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjobNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property npIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnpID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property npDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnpDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property npQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnpQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property npUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnpUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property productionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property npNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnpNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryNPIdataSyncRow
            Get
                Return CType(Me.Rows(index),qryNPIdataSyncRow)
            End Get
        End Property
        
        Public Event qryNPIdataSyncRowChanging As qryNPIdataSyncRowChangeEventHandler
        
        Public Event qryNPIdataSyncRowChanged As qryNPIdataSyncRowChangeEventHandler
        
        Public Event qryNPIdataSyncRowDeleting As qryNPIdataSyncRowChangeEventHandler
        
        Public Event qryNPIdataSyncRowDeleted As qryNPIdataSyncRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddqryNPIdataSyncRow(ByVal row As qryNPIdataSyncRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddqryNPIdataSyncRow(ByVal ID As Integer, ByVal userID As Integer, ByVal firstName As String, ByVal lastName As String, ByVal dpID As Integer, ByVal jobNum As String, ByVal site As String, ByVal Expr1 As Integer, ByVal npID As Integer, ByVal npDescription As String, ByVal npQty As Double, ByVal npUnit As String, ByVal productionDate As Date, ByVal npNotes As String) As qryNPIdataSyncRow
            Dim rowqryNPIdataSyncRow As qryNPIdataSyncRow = CType(Me.NewRow,qryNPIdataSyncRow)
            Dim columnValuesArray() As Object = New Object() {ID, userID, firstName, lastName, dpID, jobNum, site, Expr1, npID, npDescription, npQty, npUnit, productionDate, npNotes}
            rowqryNPIdataSyncRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqryNPIdataSyncRow)
            Return rowqryNPIdataSyncRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As qryNPIdataSyncRow
            Return CType(Me.Rows.Find(New Object() {ID}),qryNPIdataSyncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qryNPIdataSyncDataTable = CType(MyBase.Clone,qryNPIdataSyncDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qryNPIdataSyncDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnuserID = MyBase.Columns("userID")
            Me.columnfirstName = MyBase.Columns("firstName")
            Me.columnlastName = MyBase.Columns("lastName")
            Me.columndpID = MyBase.Columns("dpID")
            Me.columnjobNum = MyBase.Columns("jobNum")
            Me.columnsite = MyBase.Columns("site")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnnpID = MyBase.Columns("npID")
            Me.columnnpDescription = MyBase.Columns("npDescription")
            Me.columnnpQty = MyBase.Columns("npQty")
            Me.columnnpUnit = MyBase.Columns("npUnit")
            Me.columnproductionDate = MyBase.Columns("productionDate")
            Me.columnnpNotes = MyBase.Columns("npNotes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnuserID = New Global.System.Data.DataColumn("userID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuserID)
            Me.columnfirstName = New Global.System.Data.DataColumn("firstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfirstName)
            Me.columnlastName = New Global.System.Data.DataColumn("lastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlastName)
            Me.columndpID = New Global.System.Data.DataColumn("dpID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndpID)
            Me.columnjobNum = New Global.System.Data.DataColumn("jobNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjobNum)
            Me.columnsite = New Global.System.Data.DataColumn("site", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsite)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnnpID = New Global.System.Data.DataColumn("npID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnpID)
            Me.columnnpDescription = New Global.System.Data.DataColumn("npDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnpDescription)
            Me.columnnpQty = New Global.System.Data.DataColumn("npQty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnpQty)
            Me.columnnpUnit = New Global.System.Data.DataColumn("npUnit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnpUnit)
            Me.columnproductionDate = New Global.System.Data.DataColumn("productionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductionDate)
            Me.columnnpNotes = New Global.System.Data.DataColumn("npNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnpNotes)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewqryNPIdataSyncRow() As qryNPIdataSyncRow
            Return CType(Me.NewRow,qryNPIdataSyncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qryNPIdataSyncRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qryNPIdataSyncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryNPIdataSyncRowChangedEvent) Is Nothing) Then
                RaiseEvent qryNPIdataSyncRowChanged(Me, New qryNPIdataSyncRowChangeEvent(CType(e.Row,qryNPIdataSyncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryNPIdataSyncRowChangingEvent) Is Nothing) Then
                RaiseEvent qryNPIdataSyncRowChanging(Me, New qryNPIdataSyncRowChangeEvent(CType(e.Row,qryNPIdataSyncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryNPIdataSyncRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryNPIdataSyncRowDeleted(Me, New qryNPIdataSyncRowChangeEvent(CType(e.Row,qryNPIdataSyncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryNPIdataSyncRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryNPIdataSyncRowDeleting(Me, New qryNPIdataSyncRowChangeEvent(CType(e.Row,qryNPIdataSyncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveqryNPIdataSyncRow(ByVal row As qryNPIdataSyncRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qryNPIdataSyncDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class atmUhDTDataTable
        Inherits Global.System.Data.TypedTableBase(Of atmUhDTRow)
        
        Private columnJobNumber As Global.System.Data.DataColumn
        
        Private columnSite As Global.System.Data.DataColumn
        
        Private columnPhysicalLocation As Global.System.Data.DataColumn
        
        Private columnTime As Global.System.Data.DataColumn
        
        Private columnUtyType As Global.System.Data.DataColumn
        
        Private columnWasItStaked As Global.System.Data.DataColumn
        
        Private columnWhatOtherUtyStaked As Global.System.Data.DataColumn
        
        Private columnResponder As Global.System.Data.DataColumn
        
        Private columnInspector As Global.System.Data.DataColumn
        
        Private columnWitnesses As Global.System.Data.DataColumn
        
        Private columnIncidentNotes As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "atmUhDT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhysicalLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhysicalLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UtyTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUtyType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WasItStakedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWasItStaked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WhatOtherUtyStakedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWhatOtherUtyStaked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InspectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WitnessesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWitnesses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncidentNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncidentNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As atmUhDTRow
            Get
                Return CType(Me.Rows(index),atmUhDTRow)
            End Get
        End Property
        
        Public Event atmUhDTRowChanging As atmUhDTRowChangeEventHandler
        
        Public Event atmUhDTRowChanged As atmUhDTRowChangeEventHandler
        
        Public Event atmUhDTRowDeleting As atmUhDTRowChangeEventHandler
        
        Public Event atmUhDTRowDeleted As atmUhDTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddatmUhDTRow(ByVal row As atmUhDTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddatmUhDTRow(ByVal JobNumber As String, ByVal Site As String, ByVal PhysicalLocation As String, ByVal Time As String, ByVal UtyType As String, ByVal WasItStaked As String, ByVal WhatOtherUtyStaked As String, ByVal Responder As String, ByVal Inspector As String, ByVal Witnesses As String, ByVal IncidentNotes As String) As atmUhDTRow
            Dim rowatmUhDTRow As atmUhDTRow = CType(Me.NewRow,atmUhDTRow)
            Dim columnValuesArray() As Object = New Object() {JobNumber, Site, PhysicalLocation, Time, UtyType, WasItStaked, WhatOtherUtyStaked, Responder, Inspector, Witnesses, IncidentNotes}
            rowatmUhDTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowatmUhDTRow)
            Return rowatmUhDTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As atmUhDTDataTable = CType(MyBase.Clone,atmUhDTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New atmUhDTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnJobNumber = MyBase.Columns("JobNumber")
            Me.columnSite = MyBase.Columns("Site")
            Me.columnPhysicalLocation = MyBase.Columns("PhysicalLocation")
            Me.columnTime = MyBase.Columns("Time")
            Me.columnUtyType = MyBase.Columns("UtyType")
            Me.columnWasItStaked = MyBase.Columns("WasItStaked")
            Me.columnWhatOtherUtyStaked = MyBase.Columns("WhatOtherUtyStaked")
            Me.columnResponder = MyBase.Columns("Responder")
            Me.columnInspector = MyBase.Columns("Inspector")
            Me.columnWitnesses = MyBase.Columns("Witnesses")
            Me.columnIncidentNotes = MyBase.Columns("IncidentNotes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnJobNumber = New Global.System.Data.DataColumn("JobNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobNumber)
            Me.columnSite = New Global.System.Data.DataColumn("Site", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSite)
            Me.columnPhysicalLocation = New Global.System.Data.DataColumn("PhysicalLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhysicalLocation)
            Me.columnTime = New Global.System.Data.DataColumn("Time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime)
            Me.columnUtyType = New Global.System.Data.DataColumn("UtyType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUtyType)
            Me.columnWasItStaked = New Global.System.Data.DataColumn("WasItStaked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWasItStaked)
            Me.columnWhatOtherUtyStaked = New Global.System.Data.DataColumn("WhatOtherUtyStaked", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWhatOtherUtyStaked)
            Me.columnResponder = New Global.System.Data.DataColumn("Responder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponder)
            Me.columnInspector = New Global.System.Data.DataColumn("Inspector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspector)
            Me.columnWitnesses = New Global.System.Data.DataColumn("Witnesses", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWitnesses)
            Me.columnIncidentNotes = New Global.System.Data.DataColumn("IncidentNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncidentNotes)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewatmUhDTRow() As atmUhDTRow
            Return CType(Me.NewRow,atmUhDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New atmUhDTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(atmUhDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.atmUhDTRowChangedEvent) Is Nothing) Then
                RaiseEvent atmUhDTRowChanged(Me, New atmUhDTRowChangeEvent(CType(e.Row,atmUhDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.atmUhDTRowChangingEvent) Is Nothing) Then
                RaiseEvent atmUhDTRowChanging(Me, New atmUhDTRowChangeEvent(CType(e.Row,atmUhDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.atmUhDTRowDeletedEvent) Is Nothing) Then
                RaiseEvent atmUhDTRowDeleted(Me, New atmUhDTRowChangeEvent(CType(e.Row,atmUhDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.atmUhDTRowDeletingEvent) Is Nothing) Then
                RaiseEvent atmUhDTRowDeleting(Me, New atmUhDTRowChangeEvent(CType(e.Row,atmUhDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveatmUhDTRow(ByVal row As atmUhDTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "atmUhDTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblGuardRailDailyProductionsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblGuardRailDailyProductionsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnjobNum As Global.System.Data.DataColumn
        
        Private columnrunID As Global.System.Data.DataColumn
        
        Private columngrQty As Global.System.Data.DataColumn
        
        Private columnrunNotes As Global.System.Data.DataColumn
        
        Private columnrunDate As Global.System.Data.DataColumn
        
        Private columnforeman As Global.System.Data.DataColumn
        
        Private columnsite As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblGuardRailDailyProductions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jobNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjobNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property runIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrunID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property grQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property runNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrunNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property runDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrunDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property foremanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforeman
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblGuardRailDailyProductionsRow
            Get
                Return CType(Me.Rows(index),tblGuardRailDailyProductionsRow)
            End Get
        End Property
        
        Public Event tblGuardRailDailyProductionsRowChanging As tblGuardRailDailyProductionsRowChangeEventHandler
        
        Public Event tblGuardRailDailyProductionsRowChanged As tblGuardRailDailyProductionsRowChangeEventHandler
        
        Public Event tblGuardRailDailyProductionsRowDeleting As tblGuardRailDailyProductionsRowChangeEventHandler
        
        Public Event tblGuardRailDailyProductionsRowDeleted As tblGuardRailDailyProductionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblGuardRailDailyProductionsRow(ByVal row As tblGuardRailDailyProductionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblGuardRailDailyProductionsRow(ByVal ID As Integer, ByVal jobNum As String, ByVal runID As String, ByVal grQty As Double, ByVal runNotes As String, ByVal runDate As Date, ByVal foreman As Integer, ByVal site As String) As tblGuardRailDailyProductionsRow
            Dim rowtblGuardRailDailyProductionsRow As tblGuardRailDailyProductionsRow = CType(Me.NewRow,tblGuardRailDailyProductionsRow)
            Dim columnValuesArray() As Object = New Object() {ID, jobNum, runID, grQty, runNotes, runDate, foreman, site}
            rowtblGuardRailDailyProductionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblGuardRailDailyProductionsRow)
            Return rowtblGuardRailDailyProductionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As tblGuardRailDailyProductionsRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblGuardRailDailyProductionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblGuardRailDailyProductionsDataTable = CType(MyBase.Clone,tblGuardRailDailyProductionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblGuardRailDailyProductionsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnjobNum = MyBase.Columns("jobNum")
            Me.columnrunID = MyBase.Columns("runID")
            Me.columngrQty = MyBase.Columns("grQty")
            Me.columnrunNotes = MyBase.Columns("runNotes")
            Me.columnrunDate = MyBase.Columns("runDate")
            Me.columnforeman = MyBase.Columns("foreman")
            Me.columnsite = MyBase.Columns("site")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnjobNum = New Global.System.Data.DataColumn("jobNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjobNum)
            Me.columnrunID = New Global.System.Data.DataColumn("runID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrunID)
            Me.columngrQty = New Global.System.Data.DataColumn("grQty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrQty)
            Me.columnrunNotes = New Global.System.Data.DataColumn("runNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrunNotes)
            Me.columnrunDate = New Global.System.Data.DataColumn("runDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrunDate)
            Me.columnforeman = New Global.System.Data.DataColumn("foreman", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforeman)
            Me.columnsite = New Global.System.Data.DataColumn("site", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsite)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblGuardRailDailyProductionsRow() As tblGuardRailDailyProductionsRow
            Return CType(Me.NewRow,tblGuardRailDailyProductionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblGuardRailDailyProductionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblGuardRailDailyProductionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblGuardRailDailyProductionsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblGuardRailDailyProductionsRowChanged(Me, New tblGuardRailDailyProductionsRowChangeEvent(CType(e.Row,tblGuardRailDailyProductionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblGuardRailDailyProductionsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblGuardRailDailyProductionsRowChanging(Me, New tblGuardRailDailyProductionsRowChangeEvent(CType(e.Row,tblGuardRailDailyProductionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblGuardRailDailyProductionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblGuardRailDailyProductionsRowDeleted(Me, New tblGuardRailDailyProductionsRowChangeEvent(CType(e.Row,tblGuardRailDailyProductionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblGuardRailDailyProductionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblGuardRailDailyProductionsRowDeleting(Me, New tblGuardRailDailyProductionsRowChangeEvent(CType(e.Row,tblGuardRailDailyProductionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblGuardRailDailyProductionsRow(ByVal row As tblGuardRailDailyProductionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblGuardRailDailyProductionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtFileNameObjDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtFileNameObjRow)
        
        Private columnfilePath As Global.System.Data.DataColumn
        
        Private columnforeman As Global.System.Data.DataColumn
        
        Private columnjobNum As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnDisplayName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtFileNameObj"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property filePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfilePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property foremanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforeman
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jobNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjobNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisplayNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisplayName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtFileNameObjRow
            Get
                Return CType(Me.Rows(index),dtFileNameObjRow)
            End Get
        End Property
        
        Public Event dtFileNameObjRowChanging As dtFileNameObjRowChangeEventHandler
        
        Public Event dtFileNameObjRowChanged As dtFileNameObjRowChangeEventHandler
        
        Public Event dtFileNameObjRowDeleting As dtFileNameObjRowChangeEventHandler
        
        Public Event dtFileNameObjRowDeleted As dtFileNameObjRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtFileNameObjRow(ByVal row As dtFileNameObjRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtFileNameObjRow(ByVal filePath As String, ByVal foreman As Integer, ByVal jobNum As String, ByVal EntryDate As Date, ByVal DisplayName As String) As dtFileNameObjRow
            Dim rowdtFileNameObjRow As dtFileNameObjRow = CType(Me.NewRow,dtFileNameObjRow)
            Dim columnValuesArray() As Object = New Object() {filePath, foreman, jobNum, EntryDate, DisplayName}
            rowdtFileNameObjRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtFileNameObjRow)
            Return rowdtFileNameObjRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtFileNameObjDataTable = CType(MyBase.Clone,dtFileNameObjDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtFileNameObjDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfilePath = MyBase.Columns("FilePath")
            Me.columnforeman = MyBase.Columns("Foreman")
            Me.columnjobNum = MyBase.Columns("jobNum")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnDisplayName = MyBase.Columns("DisplayName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfilePath = New Global.System.Data.DataColumn("FilePath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnfilePath.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "filePath")
            Me.columnfilePath.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "filePathColumn")
            Me.columnfilePath.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnfilePath")
            Me.columnfilePath.ExtendedProperties.Add("Generator_UserColumnName", "FilePath")
            MyBase.Columns.Add(Me.columnfilePath)
            Me.columnforeman = New Global.System.Data.DataColumn("Foreman", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me.columnforeman.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "foreman")
            Me.columnforeman.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "foremanColumn")
            Me.columnforeman.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnforeman")
            Me.columnforeman.ExtendedProperties.Add("Generator_UserColumnName", "Foreman")
            MyBase.Columns.Add(Me.columnforeman)
            Me.columnjobNum = New Global.System.Data.DataColumn("jobNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjobNum)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnDisplayName = New Global.System.Data.DataColumn("DisplayName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplayName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtFileNameObjRow() As dtFileNameObjRow
            Return CType(Me.NewRow,dtFileNameObjRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtFileNameObjRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtFileNameObjRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtFileNameObjRowChangedEvent) Is Nothing) Then
                RaiseEvent dtFileNameObjRowChanged(Me, New dtFileNameObjRowChangeEvent(CType(e.Row,dtFileNameObjRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtFileNameObjRowChangingEvent) Is Nothing) Then
                RaiseEvent dtFileNameObjRowChanging(Me, New dtFileNameObjRowChangeEvent(CType(e.Row,dtFileNameObjRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtFileNameObjRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtFileNameObjRowDeleted(Me, New dtFileNameObjRowChangeEvent(CType(e.Row,dtFileNameObjRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtFileNameObjRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtFileNameObjRowDeleting(Me, New dtFileNameObjRowChangeEvent(CType(e.Row,dtFileNameObjRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtFileNameObjRow(ByVal row As dtFileNameObjRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtFileNameObjDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblActionMessagesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblActionMessagesRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnamTO As Global.System.Data.DataColumn
        
        Private columnamFROM As Global.System.Data.DataColumn
        
        Private columnamSUBJECT As Global.System.Data.DataColumn
        
        Private columnamDATE As Global.System.Data.DataColumn
        
        Private columnamMESSAGE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblActionMessages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amFROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamFROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amSUBJECTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamSUBJECT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amMESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamMESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblActionMessagesRow
            Get
                Return CType(Me.Rows(index),tblActionMessagesRow)
            End Get
        End Property
        
        Public Event tblActionMessagesRowChanging As tblActionMessagesRowChangeEventHandler
        
        Public Event tblActionMessagesRowChanged As tblActionMessagesRowChangeEventHandler
        
        Public Event tblActionMessagesRowDeleting As tblActionMessagesRowChangeEventHandler
        
        Public Event tblActionMessagesRowDeleted As tblActionMessagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblActionMessagesRow(ByVal row As tblActionMessagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblActionMessagesRow(ByVal amTO As Integer, ByVal amFROM As Integer, ByVal amSUBJECT As String, ByVal amDATE As Date, ByVal amMESSAGE As String) As tblActionMessagesRow
            Dim rowtblActionMessagesRow As tblActionMessagesRow = CType(Me.NewRow,tblActionMessagesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, amTO, amFROM, amSUBJECT, amDATE, amMESSAGE}
            rowtblActionMessagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblActionMessagesRow)
            Return rowtblActionMessagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblActionMessagesDataTable = CType(MyBase.Clone,tblActionMessagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblActionMessagesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnamTO = MyBase.Columns("amTO")
            Me.columnamFROM = MyBase.Columns("amFROM")
            Me.columnamSUBJECT = MyBase.Columns("amSUBJECT")
            Me.columnamDATE = MyBase.Columns("amDATE")
            Me.columnamMESSAGE = MyBase.Columns("amMESSAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnamTO = New Global.System.Data.DataColumn("amTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamTO)
            Me.columnamFROM = New Global.System.Data.DataColumn("amFROM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamFROM)
            Me.columnamSUBJECT = New Global.System.Data.DataColumn("amSUBJECT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamSUBJECT)
            Me.columnamDATE = New Global.System.Data.DataColumn("amDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamDATE)
            Me.columnamMESSAGE = New Global.System.Data.DataColumn("amMESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamMESSAGE)
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblActionMessagesRow() As tblActionMessagesRow
            Return CType(Me.NewRow,tblActionMessagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblActionMessagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblActionMessagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblActionMessagesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblActionMessagesRowChanged(Me, New tblActionMessagesRowChangeEvent(CType(e.Row,tblActionMessagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblActionMessagesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblActionMessagesRowChanging(Me, New tblActionMessagesRowChangeEvent(CType(e.Row,tblActionMessagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblActionMessagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblActionMessagesRowDeleted(Me, New tblActionMessagesRowChangeEvent(CType(e.Row,tblActionMessagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblActionMessagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblActionMessagesRowDeleting(Me, New tblActionMessagesRowChangeEvent(CType(e.Row,tblActionMessagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblActionMessagesRow(ByVal row As tblActionMessagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblActionMessagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtXMLsrDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtXMLsrRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnsvcDate As Global.System.Data.DataColumn
        
        Private columnunitNum As Global.System.Data.DataColumn
        
        Private columnunitMake As Global.System.Data.DataColumn
        
        Private columnunitModel As Global.System.Data.DataColumn
        
        Private columnunitYear As Global.System.Data.DataColumn
        
        Private columnunitMileage As Global.System.Data.DataColumn
        
        Private columnengineMake As Global.System.Data.DataColumn
        
        Private columnsvcProblem As Global.System.Data.DataColumn
        
        Private columnprevSvcRequest As Global.System.Data.DataColumn
        
        Private columnsvcASAP As Global.System.Data.DataColumn
        
        Private columnsvcNeedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtXMLsr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property svcDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvcDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitMakeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitMake
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitMileageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitMileage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property engineMakeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnengineMake
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property svcProblemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvcProblem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prevSvcRequestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprevSvcRequest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property svcASAPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvcASAP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property svcNeedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvcNeedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtXMLsrRow
            Get
                Return CType(Me.Rows(index),dtXMLsrRow)
            End Get
        End Property
        
        Public Event dtXMLsrRowChanging As dtXMLsrRowChangeEventHandler
        
        Public Event dtXMLsrRowChanged As dtXMLsrRowChangeEventHandler
        
        Public Event dtXMLsrRowDeleting As dtXMLsrRowChangeEventHandler
        
        Public Event dtXMLsrRowDeleted As dtXMLsrRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtXMLsrRow(ByVal row As dtXMLsrRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtXMLsrRow(ByVal ID As Integer, ByVal svcDate As Date, ByVal unitNum As Single, ByVal unitMake As String, ByVal unitModel As String, ByVal unitYear As String, ByVal unitMileage As Double, ByVal engineMake As String, ByVal svcProblem As String, ByVal prevSvcRequest As Integer, ByVal svcASAP As Boolean, ByVal svcNeedDate As Date) As dtXMLsrRow
            Dim rowdtXMLsrRow As dtXMLsrRow = CType(Me.NewRow,dtXMLsrRow)
            Dim columnValuesArray() As Object = New Object() {ID, svcDate, unitNum, unitMake, unitModel, unitYear, unitMileage, engineMake, svcProblem, prevSvcRequest, svcASAP, svcNeedDate}
            rowdtXMLsrRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtXMLsrRow)
            Return rowdtXMLsrRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As dtXMLsrRow
            Return CType(Me.Rows.Find(New Object() {ID}),dtXMLsrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtXMLsrDataTable = CType(MyBase.Clone,dtXMLsrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtXMLsrDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnsvcDate = MyBase.Columns("svcDate")
            Me.columnunitNum = MyBase.Columns("unitNum")
            Me.columnunitMake = MyBase.Columns("unitMake")
            Me.columnunitModel = MyBase.Columns("unitModel")
            Me.columnunitYear = MyBase.Columns("unitYear")
            Me.columnunitMileage = MyBase.Columns("unitMileage")
            Me.columnengineMake = MyBase.Columns("engineMake")
            Me.columnsvcProblem = MyBase.Columns("svcProblem")
            Me.columnprevSvcRequest = MyBase.Columns("prevSvcRequest")
            Me.columnsvcASAP = MyBase.Columns("svcASAP")
            Me.columnsvcNeedDate = MyBase.Columns("svcNeedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnsvcDate = New Global.System.Data.DataColumn("svcDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvcDate)
            Me.columnunitNum = New Global.System.Data.DataColumn("unitNum", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitNum)
            Me.columnunitMake = New Global.System.Data.DataColumn("unitMake", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitMake)
            Me.columnunitModel = New Global.System.Data.DataColumn("unitModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitModel)
            Me.columnunitYear = New Global.System.Data.DataColumn("unitYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitYear)
            Me.columnunitMileage = New Global.System.Data.DataColumn("unitMileage", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitMileage)
            Me.columnengineMake = New Global.System.Data.DataColumn("engineMake", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnengineMake)
            Me.columnsvcProblem = New Global.System.Data.DataColumn("svcProblem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvcProblem)
            Me.columnprevSvcRequest = New Global.System.Data.DataColumn("prevSvcRequest", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprevSvcRequest)
            Me.columnsvcASAP = New Global.System.Data.DataColumn("svcASAP", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvcASAP)
            Me.columnsvcNeedDate = New Global.System.Data.DataColumn("svcNeedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvcNeedDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dtXMLsrKey1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtXMLsrRow() As dtXMLsrRow
            Return CType(Me.NewRow,dtXMLsrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtXMLsrRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtXMLsrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtXMLsrRowChangedEvent) Is Nothing) Then
                RaiseEvent dtXMLsrRowChanged(Me, New dtXMLsrRowChangeEvent(CType(e.Row,dtXMLsrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtXMLsrRowChangingEvent) Is Nothing) Then
                RaiseEvent dtXMLsrRowChanging(Me, New dtXMLsrRowChangeEvent(CType(e.Row,dtXMLsrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtXMLsrRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtXMLsrRowDeleted(Me, New dtXMLsrRowChangeEvent(CType(e.Row,dtXMLsrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtXMLsrRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtXMLsrRowDeleting(Me, New dtXMLsrRowChangeEvent(CType(e.Row,dtXMLsrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtXMLsrRow(ByVal row As dtXMLsrRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsAE_DataSync = New dsAE_DataSync
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtXMLsrDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtXMLdpRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtXMLdp As dtXMLdpDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtXMLdp = CType(Me.Table,dtXMLdpDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property foreman() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.foremanColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'foreman' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.foremanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entryDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.entryDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entryDate' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.entryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property displayName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.displayNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'displayName' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.displayNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dpID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.dpIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dpID' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.dpIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jobNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.jobNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jobNum' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.jobNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property site() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.siteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'site' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.siteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payItemID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.payItemIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'payItemID' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.payItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'code' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dpQty() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.dpQtyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dpQty' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.dpQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property siteNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLdp.siteNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'siteNotes' in table 'dtXMLdp' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLdp.siteNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsforemanNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.foremanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetforemanNull()
            Me(Me.tabledtXMLdp.foremanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsentryDateNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.entryDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetentryDateNull()
            Me(Me.tabledtXMLdp.entryDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdisplayNameNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.displayNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdisplayNameNull()
            Me(Me.tabledtXMLdp.displayNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tabledtXMLdp.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdpIDNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.dpIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdpIDNull()
            Me(Me.tabledtXMLdp.dpIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjobNumNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.jobNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjobNumNull()
            Me(Me.tabledtXMLdp.jobNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssiteNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.siteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsiteNull()
            Me(Me.tabledtXMLdp.siteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspayItemIDNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.payItemIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpayItemIDNull()
            Me(Me.tabledtXMLdp.payItemIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeNull()
            Me(Me.tabledtXMLdp.codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescriptionNull()
            Me(Me.tabledtXMLdp.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdpQtyNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.dpQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdpQtyNull()
            Me(Me.tabledtXMLdp.dpQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssiteNotesNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLdp.siteNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsiteNotesNull()
            Me(Me.tabledtXMLdp.siteNotesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class qryNPIdataSyncRow
        Inherits Global.System.Data.DataRow
        
        Private tableqryNPIdataSync As qryNPIdataSyncDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryNPIdataSync = CType(Me.Table,qryNPIdataSyncDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableqryNPIdataSync.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableqryNPIdataSync.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property userID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.userIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'userID' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.userIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property firstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.firstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'firstName' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.firstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.lastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lastName' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.lastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dpID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.dpIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dpID' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.dpIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jobNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.jobNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jobNum' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.jobNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property site() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.siteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'site' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.siteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.Expr1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property npID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.npIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'npID' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.npIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property npDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.npDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'npDescription' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.npDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property npQty() As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.npQtyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'npQty' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.npQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property npUnit() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.npUnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'npUnit' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.npUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property productionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.productionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'productionDate' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.productionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property npNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNPIdataSync.npNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'npNotes' in table 'qryNPIdataSync' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNPIdataSync.npNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuserIDNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.userIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuserIDNull()
            Me(Me.tableqryNPIdataSync.userIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfirstNameNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.firstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfirstNameNull()
            Me(Me.tableqryNPIdataSync.firstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslastNameNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.lastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlastNameNull()
            Me(Me.tableqryNPIdataSync.lastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdpIDNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.dpIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdpIDNull()
            Me(Me.tableqryNPIdataSync.dpIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjobNumNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.jobNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjobNumNull()
            Me(Me.tableqryNPIdataSync.jobNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssiteNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.siteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsiteNull()
            Me(Me.tableqryNPIdataSync.siteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableqryNPIdataSync.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnpIDNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.npIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnpIDNull()
            Me(Me.tableqryNPIdataSync.npIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnpDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.npDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnpDescriptionNull()
            Me(Me.tableqryNPIdataSync.npDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnpQtyNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.npQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnpQtyNull()
            Me(Me.tableqryNPIdataSync.npQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnpUnitNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.npUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnpUnitNull()
            Me(Me.tableqryNPIdataSync.npUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsproductionDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.productionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetproductionDateNull()
            Me(Me.tableqryNPIdataSync.productionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnpNotesNull() As Boolean
            Return Me.IsNull(Me.tableqryNPIdataSync.npNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnpNotesNull()
            Me(Me.tableqryNPIdataSync.npNotesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class atmUhDTRow
        Inherits Global.System.Data.DataRow
        
        Private tableatmUhDT As atmUhDTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableatmUhDT = CType(Me.Table,atmUhDTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.JobNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobNumber' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.JobNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Site() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.SiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Site' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.SiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhysicalLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.PhysicalLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhysicalLocation' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.PhysicalLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.TimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Time' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UtyType() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.UtyTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UtyType' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.UtyTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WasItStaked() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.WasItStakedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WasItStaked' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.WasItStakedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WhatOtherUtyStaked() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.WhatOtherUtyStakedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WhatOtherUtyStaked' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.WhatOtherUtyStakedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Responder() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.ResponderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Responder' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.ResponderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inspector() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.InspectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inspector' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.InspectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Witnesses() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.WitnessesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Witnesses' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.WitnessesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncidentNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableatmUhDT.IncidentNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IncidentNotes' in table 'atmUhDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableatmUhDT.IncidentNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobNumberNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.JobNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobNumberNull()
            Me(Me.tableatmUhDT.JobNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.SiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteNull()
            Me(Me.tableatmUhDT.SiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhysicalLocationNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.PhysicalLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhysicalLocationNull()
            Me(Me.tableatmUhDT.PhysicalLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTimeNull()
            Me(Me.tableatmUhDT.TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUtyTypeNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.UtyTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUtyTypeNull()
            Me(Me.tableatmUhDT.UtyTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWasItStakedNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.WasItStakedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWasItStakedNull()
            Me(Me.tableatmUhDT.WasItStakedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWhatOtherUtyStakedNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.WhatOtherUtyStakedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWhatOtherUtyStakedNull()
            Me(Me.tableatmUhDT.WhatOtherUtyStakedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResponderNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.ResponderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResponderNull()
            Me(Me.tableatmUhDT.ResponderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInspectorNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.InspectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInspectorNull()
            Me(Me.tableatmUhDT.InspectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWitnessesNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.WitnessesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWitnessesNull()
            Me(Me.tableatmUhDT.WitnessesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncidentNotesNull() As Boolean
            Return Me.IsNull(Me.tableatmUhDT.IncidentNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncidentNotesNull()
            Me(Me.tableatmUhDT.IncidentNotesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblGuardRailDailyProductionsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblGuardRailDailyProductions As tblGuardRailDailyProductionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblGuardRailDailyProductions = CType(Me.Table,tblGuardRailDailyProductionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tabletblGuardRailDailyProductions.IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jobNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.jobNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jobNum' in table 'tblGuardRailDailyProductions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.jobNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property runID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.runIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'runID' in table 'tblGuardRailDailyProductions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.runIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grQty() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.grQtyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'grQty' in table 'tblGuardRailDailyProductions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.grQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property runNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.runNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'runNotes' in table 'tblGuardRailDailyProductions' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.runNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property runDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.runDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'runDate' in table 'tblGuardRailDailyProductions' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.runDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property foreman() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.foremanColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'foreman' in table 'tblGuardRailDailyProductions' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.foremanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property site() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGuardRailDailyProductions.siteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'site' in table 'tblGuardRailDailyProductions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGuardRailDailyProductions.siteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjobNumNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.jobNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjobNumNull()
            Me(Me.tabletblGuardRailDailyProductions.jobNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrunIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.runIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrunIDNull()
            Me(Me.tabletblGuardRailDailyProductions.runIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgrQtyNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.grQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgrQtyNull()
            Me(Me.tabletblGuardRailDailyProductions.grQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrunNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.runNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrunNotesNull()
            Me(Me.tabletblGuardRailDailyProductions.runNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrunDateNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.runDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrunDateNull()
            Me(Me.tabletblGuardRailDailyProductions.runDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsforemanNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.foremanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetforemanNull()
            Me(Me.tabletblGuardRailDailyProductions.foremanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssiteNull() As Boolean
            Return Me.IsNull(Me.tabletblGuardRailDailyProductions.siteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsiteNull()
            Me(Me.tabletblGuardRailDailyProductions.siteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtFileNameObjRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtFileNameObj As dtFileNameObjDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtFileNameObj = CType(Me.Table,dtFileNameObjDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property filePath() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFileNameObj.filePathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FilePath' in table 'dtFileNameObj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFileNameObj.filePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property foreman() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtFileNameObj.foremanColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foreman' in table 'dtFileNameObj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFileNameObj.foremanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jobNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFileNameObj.jobNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jobNum' in table 'dtFileNameObj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFileNameObj.jobNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtFileNameObj.EntryDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryDate' in table 'dtFileNameObj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFileNameObj.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisplayName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFileNameObj.DisplayNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisplayName' in table 'dtFileNameObj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFileNameObj.DisplayNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfilePathNull() As Boolean
            Return Me.IsNull(Me.tabledtFileNameObj.filePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfilePathNull()
            Me(Me.tabledtFileNameObj.filePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsforemanNull() As Boolean
            Return Me.IsNull(Me.tabledtFileNameObj.foremanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetforemanNull()
            Me(Me.tabledtFileNameObj.foremanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjobNumNull() As Boolean
            Return Me.IsNull(Me.tabledtFileNameObj.jobNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjobNumNull()
            Me(Me.tabledtFileNameObj.jobNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryDateNull() As Boolean
            Return Me.IsNull(Me.tabledtFileNameObj.EntryDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryDateNull()
            Me(Me.tabledtFileNameObj.EntryDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisplayNameNull() As Boolean
            Return Me.IsNull(Me.tabledtFileNameObj.DisplayNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisplayNameNull()
            Me(Me.tabledtFileNameObj.DisplayNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblActionMessagesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblActionMessages As tblActionMessagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblActionMessages = CType(Me.Table,tblActionMessagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tabletblActionMessages.IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblActionMessages.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amTO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblActionMessages.amTOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amTO' in table 'tblActionMessages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblActionMessages.amTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amFROM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblActionMessages.amFROMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amFROM' in table 'tblActionMessages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblActionMessages.amFROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amSUBJECT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblActionMessages.amSUBJECTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amSUBJECT' in table 'tblActionMessages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblActionMessages.amSUBJECTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblActionMessages.amDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amDATE' in table 'tblActionMessages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblActionMessages.amDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amMESSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblActionMessages.amMESSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amMESSAGE' in table 'tblActionMessages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblActionMessages.amMESSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamTONull() As Boolean
            Return Me.IsNull(Me.tabletblActionMessages.amTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamTONull()
            Me(Me.tabletblActionMessages.amTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamFROMNull() As Boolean
            Return Me.IsNull(Me.tabletblActionMessages.amFROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamFROMNull()
            Me(Me.tabletblActionMessages.amFROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamSUBJECTNull() As Boolean
            Return Me.IsNull(Me.tabletblActionMessages.amSUBJECTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamSUBJECTNull()
            Me(Me.tabletblActionMessages.amSUBJECTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamDATENull() As Boolean
            Return Me.IsNull(Me.tabletblActionMessages.amDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamDATENull()
            Me(Me.tabletblActionMessages.amDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamMESSAGENull() As Boolean
            Return Me.IsNull(Me.tabletblActionMessages.amMESSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamMESSAGENull()
            Me(Me.tabletblActionMessages.amMESSAGEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtXMLsrRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtXMLsr As dtXMLsrDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtXMLsr = CType(Me.Table,dtXMLsrDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tabledtXMLsr.IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtXMLsr.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property svcDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.svcDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'svcDate' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.svcDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitNum() As Single
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.unitNumColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unitNum' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.unitNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitMake() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.unitMakeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unitMake' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.unitMakeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitModel() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.unitModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unitModel' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.unitModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitYear() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.unitYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unitYear' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.unitYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitMileage() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.unitMileageColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unitMileage' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.unitMileageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property engineMake() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.engineMakeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'engineMake' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.engineMakeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property svcProblem() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.svcProblemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'svcProblem' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.svcProblemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prevSvcRequest() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.prevSvcRequestColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prevSvcRequest' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.prevSvcRequestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property svcASAP() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.svcASAPColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'svcASAP' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.svcASAPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property svcNeedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtXMLsr.svcNeedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'svcNeedDate' in table 'dtXMLsr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtXMLsr.svcNeedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssvcDateNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.svcDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsvcDateNull()
            Me(Me.tabledtXMLsr.svcDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitNumNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.unitNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitNumNull()
            Me(Me.tabledtXMLsr.unitNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitMakeNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.unitMakeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitMakeNull()
            Me(Me.tabledtXMLsr.unitMakeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitModelNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.unitModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitModelNull()
            Me(Me.tabledtXMLsr.unitModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitYearNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.unitYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitYearNull()
            Me(Me.tabledtXMLsr.unitYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitMileageNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.unitMileageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitMileageNull()
            Me(Me.tabledtXMLsr.unitMileageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsengineMakeNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.engineMakeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetengineMakeNull()
            Me(Me.tabledtXMLsr.engineMakeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssvcProblemNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.svcProblemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsvcProblemNull()
            Me(Me.tabledtXMLsr.svcProblemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprevSvcRequestNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.prevSvcRequestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprevSvcRequestNull()
            Me(Me.tabledtXMLsr.prevSvcRequestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssvcASAPNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.svcASAPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsvcASAPNull()
            Me(Me.tabledtXMLsr.svcASAPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssvcNeedDateNull() As Boolean
            Return Me.IsNull(Me.tabledtXMLsr.svcNeedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsvcNeedDateNull()
            Me(Me.tabledtXMLsr.svcNeedDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtXMLdpRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtXMLdpRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtXMLdpRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtXMLdpRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class qryNPIdataSyncRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qryNPIdataSyncRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As qryNPIdataSyncRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As qryNPIdataSyncRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class atmUhDTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As atmUhDTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As atmUhDTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As atmUhDTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblGuardRailDailyProductionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblGuardRailDailyProductionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblGuardRailDailyProductionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblGuardRailDailyProductionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtFileNameObjRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtFileNameObjRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtFileNameObjRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtFileNameObjRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblActionMessagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblActionMessagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblActionMessagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblActionMessagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtXMLsrRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtXMLsrRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtXMLsrRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtXMLsrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
